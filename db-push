#!/usr/bin/env python3
import glob
from itertools import tee
import os
from os.path import join, splitext

import click

COMMIT = 'asdfasdf'

# PPGkr1uZxfYAAAAAAAANecf3IwCa8asyrZKFj0T7p9_PmwgfMtRcATOaz5HsOB9A

def list_files():
    """Read the configuration.

    Return an iterable of (local, remote) tuples, where local is the local path
    to upload, and remote is the target path on Dropbox.
    """
    import yaml

    with open('.dropbox.yaml') as f:
        config = yaml.load(f)

    target_dir = config.pop('directory')

    def _add_commit_hash(entry):
        remote = splitext(entry[1])
        return entry[0], '%s_%s%s' % (remote[0], COMMIT, remote[1])

    def _add_dir(entry, dirname):
        return entry[0], join(dirname, entry[1])

    result = []
    for group in config.pop('groups', []):
        if isinstance(group, str):
            group = {'files': group}

        files = glob.iglob(group['files'])
        files = zip(*tee(files, 2))

        if group.get('commit_hash', False):
            files = map(_add_commit_hash, files)

        subdir = group.get('subdir', None)
        if subdir is not None:
            files = map(lambda e: _add_dir(e, subdir), files)

        result.extend(files)

    # Add the overall target directory
    result = map(lambda e: _add_dir(e, target_dir), result)

    return list(result)


def print_files(files):
    for f in files:
        print('%s\n\t→ %s' % f)


def upload_files(token, files):
    from dropbox import Dropbox
    from dropbox.files import (
        CommitInfo,
        UploadSessionCursor,
        UploadSessionFinishArg,
        WriteMode,
        )

    dbx = Dropbox(token)

    entries = []

    for n, entry in enumerate(files):
        print('Uploading %s\n\t→ %s' % entry)

        local, remote = entry

        with open(local, 'rb') as f:
            if n == 0:
                uss_result = dbx.files_upload_session_start(f.read())
                cursor = UploadSessionCursor(uss_result.session_id, offset=0)
            else:
                dbx.files_upload_session_append_v2(f.read(), cursor,
                                                   close=(n + 1 == len(files)))

            ci = CommitInfo(path=remote, mode=WriteMode('overwrite', None))
            usfa = UploadSessionFinishArg(cursor, ci)
            print(usfa)
            entries.append(usfa)

            cursor.offset += f.tell()

    print('Finalizing.')

    dbx.files_upload_session_finish_batch(entries)


@click.command()
@click.option('-n', '--dry-run', is_flag=True)
@click.option('--api-token', default=os.environ.get('DROPBOX_API_TOKEN', None))
def cli(dry_run, api_token):
    files = list_files()

    print_files(files)

    if not dry_run:
        upload_files(api_token, files)


if __name__ == '__main__':
    cli()
