#!/usr/bin/env python3
"""Display information about unclean Git repositories under $HOME.

By default, repositories with paths matching the following regular expression
are ignored:

«{}»
"""
import argparse
import os
import re

from colorama import Fore as fg
from git import Repo
from git.exc import GitCommandError

HOME = os.path.expanduser('~')

COLORS = {
    'A': fg.RED,
    'M': fg.YELLOW,
    'D': fg.GREEN,
    'R': fg.CYAN,
    }

FILTER = re.compile('(%s)' % '|'.join([
    '\.local/share/Trash',
    'vc/other',
    'vc/dotfiles/atom/packages']))


# Parse simple arguments
parser = argparse.ArgumentParser(description=__doc__.format(FILTER.pattern))
parser.add_argument('--fetch', action='store_true',
                    help='fetch remotes for comparison (slow)')
parser.add_argument('--all', dest='verbose', action='store_true',
                    help='also show information about ignored repos')
args = parser.parse_args()


def find_repos():
    for dirpath, dirnames, _ in os.walk(HOME):
        if '.git' in dirnames:
            yield Repo(dirpath)


def diff_lines(name, diffs):
    if len(diffs) == 0:
        return

    print('  %s' % name)

    for d in diffs:
        path = d.a_path
        color = COLORS[d.change_type[0]]
        print(color + '    %s' % path + fg.RESET)


def plural(num):
    return '{:d} commit{}'.format(num, 's' if num > 1 else '')


clean = 0

for repo in find_repos():
    quiet = FILTER.search(repo.working_dir) and not args.verbose

    # Optionally fetch remotes
    if args.fetch and not quiet:
        try:
            repo.remotes.origin.fetch()
        except (AttributeError, GitCommandError):
            pass

    # Count number of commits ahead and/or behind upstream
    try:
        ahead_query = '{0}@{{u}}..{0}'.format(repo.head.ref)
        behind_query = '{0}..{0}@{{u}}'.format(repo.head.ref)
        ahead = sum(1 for c in repo.iter_commits(ahead_query))
        behind = sum(1 for c in repo.iter_commits(behind_query))
    except (TypeError, GitCommandError):
        ahead, behind = 0, 0

    # Get the name of the current branch
    try:
        branch = 'on: %s' % repo.active_branch
    except TypeError:
        branch = 'detached HEAD'

    # Boolean variables describing repo status
    dirty = repo.is_dirty(untracked_files=True)
    ahead_or_behind = ahead + behind > 0

    if dirty or (ahead_or_behind and not quiet):
        # Identify the repository ahead of other information that may follow
        print('\n~%s (%s)' % (repo.working_dir[len(HOME):], branch))

        if quiet:
            # A filtered repo, and we're not being verbose
            continue
    else:
        # Not outputting anything about this repository
        clean += 1
        continue

    # Information about commits ahead or behind
    if ahead:
        print(fg.MAGENTA + '  ← %s to push' % plural(ahead) + fg.RESET)
    if behind:
        print(fg.BLUE + '  → %s to fast-forward' % plural(behind) + fg.RESET)

    # Information about the index and working tree
    # Staged
    diff_lines('Staged', repo.index.diff(repo.head.commit))

    # Modified in the working tree
    diff_lines('Working tree', repo.index.diff(None))

    # Untracked files
    untracked = repo.untracked_files
    if len(untracked) > 20:
        print('  (%d untracked files not listed)' % len(untracked))
    elif len(untracked) > 0:
        print('    ' + fg.GREEN + '\n    '.join(untracked) + fg.RESET)

print('\n%d other clean & synced repositories\n' % clean)
