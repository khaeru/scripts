#!/usr/bin/env python3
"""Upload files using rclone using a control file.

Reads .rclone-push.yaml in the current directory, uses it to generate a list of
files, and uploads them using rclone [1].

Additional options (e.g. --dry-run, --filter, --verbose) are passed to rclone.

EXAMPLE

This configuration file:

    \b
    remote: my-Dropbox

    \b
    '/Target/path':
      - fn1.txt
      - *.pdf
      - a_directory
      - files: *.jpg
        subdir: bar
      - files: *.log
        name_template: {orig.stem}.txt

    \b
    '/Another/path':
      - fn2.txt

...causes the following actions:

\b
- The rclone remote named 'my-Dropbox' is used.
- The file 'fn1.txt', all files matching the wildcard '*.pdf', and the
  contents of 'a_directory' are uploaded to the folder 'Target/path'.
- The file 'fn2.txt' is uploaded to 'Another/path'.
- Files matching '*.jpg' are uploaded to 'Target/path/bar'.
- Files matching '*.log' are uploaded to 'Target/path', with names
  modified to replace the .log extension with .txt.

NAME FORMATTING

The name_template string may contain zero or more of the following in braces
({}).

\b
- orig: the original filename. This has attributes such as stem,
  suffix, and name; see [2].
- now: the current time as a datetime object; this can be formatted
  as described at [3].
- commit: the first 7 characters of the latest git commit hash for the
  current repository, plus '+' if the current directory (NOT the entire
  repository) has any uncommitted changes.

Paths beginning with / or * should be quoted, as these are special characters
in YAML.

\b
1. https://rclone.org
2. https://docs.python.org/3/library/pathlib.html#methods-and-properties
3. https://docs.python.org/3/library/datetime.html, at "strftime() behavior"
"""
from datetime import datetime
from functools import partial
from glob import iglob
from itertools import chain, tee
from os import makedirs, symlink, walk
from pathlib import Path
from tempfile import TemporaryDirectory
from subprocess import Popen, PIPE, STDOUT
from sys import exit, stdout

import click
from git import Repo
import yaml


def get_commit_hash():
    """Return the first 7 digits of the git commit hash in the current repo.

    A '+' is appended if the current directory is dirty.
    """
    repo = Repo('.', search_parent_directories=True)
    path = Path('.').resolve().relative_to(repo.working_dir)
    result = repo.head.commit.hexsha[:7]
    if repo.is_dirty(path=path):
        result += '+'
    return result


# Methods for modifying entries in the file list. Each takes a 2-tuple of
# pathlib.Path as the argument *entry*, and return the same.
def add_remote_dir(dirname, entry):
    """Prepends *dirname* to the remote path of *entry*."""
    return entry[0], dirname / entry[1]


def format_name(template, entry, **args):
    """Format the remote name in *entry* according to *template* and *args*."""
    return entry[0], Path(template.format(orig=entry[1], **args))


def resolve(entry):
    """Resolve anything like '/../' in the path, as well as symlinks."""
    return entry[0].resolve(), entry[1].resolve()


def expand_dir(name):
    """Expand *name*, if it is a directory, to an iterable of filenames."""
    result = []
    for dirpath, _, filenames in walk(name):
        result.append([dirpath / fn for fn in filenames])

    # If name was a regular file; result will be empty
    return chain(*result) if len(result) else [name]


def list_files(config):
    """Read the configuration.

    Return an iterable of (local, remote) tuples, where local is the local path
    to upload, and remote is the target path on the remote. Each of these
    tuples is an 'entry'.

    *config* should be dict-like, containing keys and values as described in
    the help text.
    """
    result = []

    args = dict(commit=get_commit_hash(), now=datetime.now())

    # Iterate over top-level YAML mappings. The key is a target directory on
    # the remote
    for target_dir, groups in config.items():
        # Iterate over groups with a common target directory
        for group in groups:
            # Make sure group['files'] contains a list of patterns
            if isinstance(group, str):
                group = {'files': [group]}
            elif isinstance(group['files'], str):
                group['files'] = [group['files']]

            # Determine files matching the patterns
            files = chain(*[iglob(pattern, recursive=True) for pattern in
                            group['files']])

            # Expand any director(ies)
            files = chain(*map(expand_dir, files))

            # Double-up the list of filenames to (local, remote), identical for
            # now
            files = zip(*tee(map(Path, files), 2))

            # Apply the name template, if any
            try:
                func = partial(format_name, group['name_template'], **args)
                files = map(func, files)
            except KeyError:
                pass

            # Set the target subdirectory, if any
            try:
                files = map(partial(add_remote_dir, group['subdir']),
                            files)
            except KeyError:
                pass

            # Add the overall target directory and normalize remote paths
            files = map(partial(add_remote_dir, target_dir), files)
            files = map(resolve, files)

            # Extend the overall list of entries
            result.append(files)

    # Sort the entries
    return sorted(chain(*result))


def upload_files(remote, files, rclone_args):
    """Upload the *files* to *remote*."""
    # Command-line for invoking rclone
    cmd = ['rclone', 'copyto', '--copy-links']
    cmd.extend(rclone_args)

    # Create a temporary directory full of symlinks. The contents of this
    # directory have the the same directory structure intended for the remote.
    with TemporaryDirectory(prefix='rclone-') as d:
        cmd.extend([d, remote + ':'])

        for src, dest in files:
            tmp_dest = d / dest.relative_to('/')
            makedirs(tmp_dest.parent, exist_ok=True)
            symlink(src, tmp_dest)

        # Invoke rclone
        p = Popen(cmd, stdout=PIPE, stderr=STDOUT)

        # Transfer rclone output to stdout
        for line in iter(p.stdout.readline, b''):
            stdout.write(line.decode(stdout.encoding))

        p.wait()
        exit(p.returncode)


@click.command(help=__doc__,
               context_settings=dict(ignore_unknown_options=True))
@click.argument('rclone_args', metavar='ARGS', nargs=-1,
                type=click.UNPROCESSED)
def rclone_push(rclone_args):
    # Read configuration
    with open('.rclone-push.yaml') as f:
        files_config = yaml.load(f)
        remote = files_config.pop('remote')

    # Identify files
    files = list_files(files_config)

    # Upload
    upload_files(remote, files, rclone_args)


rclone_push()
